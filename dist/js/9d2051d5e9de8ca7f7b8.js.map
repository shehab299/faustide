{"version":3,"file":"js/9d2051d5e9de8ca7f7b8.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACO,MAAMA,QAAQ,CAAC;EASlB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,WAAWA,CAACC,QAAgB,EAAU;IACzC,OAAO,OAAO,YAAAC,MAAA,CACHD,QAAQ,OAAI,YAAAC,MAAA,CACZ,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,OAAI,GAC5C,OAAO;EACb;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,OAAOA,CAACC,IAAY,EAAEC,GAAW,EAAU;IAC9C,OAAOD,IAAI,CAACE,MAAM,IAAID,GAAG,GAAG,IAAI,GAAGD,IAAI,CAACG,MAAM,CAACF,GAAG,CAAC;EACvD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,eAAeA,CAACJ,IAAY,EAAU;IACzC,IAAMK,OAAO,GAAGL,IAAI,CAACM,KAAK,CAAC,IAAI,CAACC,eAAe,CAAC;IAChD,OAAOF,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,aAAaA,CAACR,IAAY,EAAW;IACxC,IAAMK,OAAO,GAAGL,IAAI,CAACM,KAAK,CAAC,IAAI,CAACG,eAAe,CAAC;IAChD,OAAO,CAAC,CAACJ,OAAO;EACpB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOK,iBAAiBA,CAACV,IAAY,EAAU;IAC3C,IAAMK,OAAO,GAAGL,IAAI,CAACM,KAAK,CAAC,IAAI,CAACK,iBAAiB,CAAC;IAClD,OAAON,OAAO,GAAGA,OAA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","sources":["webpack://fausteditorweb/./src/monaco-faust/Faust2MD.ts","webpack://fausteditorweb/./src/monaco-faust/Faust2Doc.ts","webpack://fausteditorweb/./src/monaco-faust/FaustLang.ts"],"sourcesContent":["/*\n\nUltra simple automatic documentation system for Faust.\nCreates a markdown file by extracting the comments from\na Faust file. The option -t n can be used to change the\ndefault (4) tab setting. The option -c can be used to\ninclude the Faust code itself into the generated doc.\nAnd the option -f can be used to include a YAML front\nmatter with the name of the file and the date.\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\nThe translation is the following:\n  ## foo(x,y)\n    markdown text....\n    markdown text....\n--------------------------------------------------------\n*/\ntype Faust2MDOptions = { tabsize: number; code: boolean; front: boolean };\n/**\n * faust2md ts port\n *\n * @class Faust2MD\n */\nexport class Faust2MD {\n    private static readonly REGEX_BEG_TITLE = /^\\s*\\/\\/#{3,}\\s*([^#]*[^#\\s])\\s*#{3,}$/;\n    private static readonly REGEX_END_TITLE = /^\\s*((\\/\\/#{3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_SECTION = /^\\s*\\/\\/={3,}\\s*([^=]*[^=\\s])\\s*={3,}$/;\n    private static readonly REGEX_END_SECTION = /^\\s*((\\/\\/={3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_COMMENT = /^\\s*\\/\\/-{3,}\\s*([^-]*[^=\\s])\\s*-{3,}$/;\n    private static readonly REGEX_END_COMMENT = /^\\s*((\\/\\/-{3,})|(\\s*))$/;\n    private static readonly REGEX_INDENT = /(^\\s*\\/\\/\\s*)[^\\s]/;\n    private static readonly REGEX_COMMENT = /^\\s*\\/\\//;\n    /**\n     * Print the front matter of the file\n     *\n     * @static\n     * @param {string} fileName\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static frontMatter(fileName: string): string {\n        return \"---\\n\"\n        + `file: ${fileName}\\n`\n        + `date: ${new Date().toLocaleDateString()}\\n`\n        + \"---\\n\";\n    }\n    /**\n     * Outdent a comment line by n characters in\n     * order to remove the prefix \"//   \"\n     *\n     * @static\n     * @param {string} line\n     * @param {number} idt\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static outdent(line: string, idt: number): string {\n        return line.length <= idt ? \"\\n\" : line.substr(idt);\n    }\n    /**\n     * Match the first line of a title\n     * of type \"//#### Title ####\"\n     * at least 3 # are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginTitle(line: string): string {\n        const matched = line.match(this.REGEX_BEG_TITLE);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a title\n     * of type \"//########\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndTitle(line: string): boolean {\n        const matched = line.match(this.REGEX_END_TITLE);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a section\n     * of type \"//==== Section ====\"\n     * at least 3 = are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginSection(line: string): string {\n        const matched = line.match(this.REGEX_BEG_SECTION);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a section\n     * of type \"//=======\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndSection(line: string): boolean {\n        const matched = line.match(this.REGEX_END_SECTION);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a comment\n     * of type \"//--- foo(x,y) ----\"\n     * at least 3 - are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginComment(line: string): string {\n        const matched = line.match(this.REGEX_BEG_COMMENT);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a comment\n     * of type \"//-----------------\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndComment(line: string): boolean {\n        const matched = line.match(this.REGEX_END_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Measure the indentation of a md-comment line\n     * that is the len of the prefix '//   '\n     *\n     * @static\n     * @param {string} line\n     * @returns {number}\n     * @memberof Faust2MD\n     */\n    static indentation(line: string): number {\n        const matched = line.match(this.REGEX_INDENT);\n        return matched ? matched[1].length : 0;\n    }\n    /**\n     * Indicates if a line is a comment\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static isComment(line: string): boolean {\n        const matched = line.match(this.REGEX_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} strIn\n     * @param {string} [fileName]\n     * @param {{ tabsize?: number, code?: boolean, front?: boolean }} [optionsIn]\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static parse(strIn: string, fileName?: string, optionsIn?: { tabsize?: number; code?: boolean; front?: boolean }): string {\n        const options: Faust2MDOptions = { tabsize: 4, code: false, front: false, ...optionsIn };\n        let strOut = \"\";\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        if (options.front && fileName) strOut += this.frontMatter(fileName);\n        strIn.split(\"\\n\").forEach((line) => {\n            if (!this.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    strOut += \"\\n\";\n                    inComment = false;\n                }\n                if (options.code) strOut += `\\t${line}\\n`;\n                return;\n            }\n            if (inComment) { // we are in a md-comment\n                if (idt === 0) idt = this.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: this.matchEndComment(line), endS: this.matchEndSection(line), endT: this.matchEndTitle(line) };\n                if (endC) strOut += \"\\n---\\n\\n\";\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strOut += this.outdent(line, idt) + \"\\n\";\n                return;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: this.matchBeginComment(line), s: this.matchBeginSection(line), t: this.matchBeginTitle(line) };\n            if (c) strOut += `\\n### ${c}\\n`;\n            else if (s) strOut += `\\n## ${s}\\n`;\n            else if (t) strOut += `\\n# ${t}\\n`;\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n            } else if (options.code) strOut += `\\t${line}\\n`;\n        });\n        return strOut;\n    }\n}\n","/* eslint-disable no-await-in-loop */\nimport { Faust2MD } from \"./Faust2MD\";\n/*\nRetrive faust2md doc by parsing .dsp file\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\n--------------------------------------------------------\n*/\nexport type TFaustDocs = { [key: string]: TFaustDoc };\nexport type TFaustDoc = { path: string[]; name: string; doc: string };\n/**\n *\n * @class Faust2Doc\n */\nexport class Faust2Doc {\n    private static readonly REGEX_DEF_LIB = /\\b(\\w+)\\s*=\\s*library\\(\"(.+)\"\\);/;\n    private static readonly REGEX_DEF_IMP = /\\bimport\\(\"(.+)\"\\);/;\n    private static readonly REGEX_FUNC_NAME = /`.*?([\\w[\\]|]+)`/;\n    private static readonly REGEX_FUNC_NAME_COND = /\\[(.+?)(\\|.+?)*?]/;\n    /**\n     * Retrieve a library definition\n     *\n     * @static\n     * @param {string} line\n     * @returns {{ namespace: string, fileName: string }[]}\n     * @memberof Faust2Doc\n     */\n    static matchLibrary(line: string): { namespace: string; fileName: string }[] {\n        const libs = [] as { namespace: string; fileName: string }[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_LIB, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_LIB);\n                if (matched) libs.push({ namespace: matched[1], fileName: matched[2] });\n            });\n        }\n        return libs;\n    }\n    /**\n     * Retrieve an import expression\n     *\n     * @static\n     * @param {string} line\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static matchImport(line: string): string[] {\n        const imps = [] as string[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_IMP, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_IMP);\n                if (matched) imps.push(matched[1]);\n            });\n        }\n        return imps;\n    }\n    /**\n     * Retrieve true function name from string in comments\n     * `(si.)bus`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchFuncName(str: string): string {\n        const matched = str.match(this.REGEX_FUNC_NAME);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Get all conditions in func name like `[third|half]_octave_[analyzer|filterbank][n]`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static getAllConditions(str: string): string[] {\n        return this.getCondition([str]);\n    }\n    /**\n     * getAllConditions Recursive body\n     *\n     * @static\n     * @param {string[]} [condsIn]\n     * @param {RegExp} [regexp]\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    private static getCondition(condsIn?: string[]): string[] {\n        const conds = [] as string[];\n        condsIn.forEach((cond) => {\n            const regexp = new RegExp(this.REGEX_FUNC_NAME_COND, \"g\");\n            const result = regexp.exec(cond);\n            if (!result) return;\n            const found = result[0];\n            const index = result.index;\n            const subConds = result.splice(1).filter(el => typeof el === \"string\").map(str => str.replace(/^\\|/, \"\"));\n            const before = cond.substring(0, index);\n            const after = cond.substring(index + found.length);\n            if (subConds.length === 1) {\n                conds.push(before + after);\n                conds.push(before + subConds + after);\n            } else {\n                subConds.forEach(subCond => conds.push(before + subCond + after));\n            }\n        });\n        return conds.length ? this.getCondition(conds) : condsIn;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} fileName fileName to be fetch using getFile\n     * @param {string} getFile callback used for import and library expressions\n     * @param {string[]} [depthIn] current Depth, stop when 0;\n     * @param {string[]} [pathIn] path of current namespace\n     * @param {string} [docIn] recursive accum object for output\n     * @returns {Promise<TFaustDocs>}\n     * @memberof Faust2MD\n     */\n    static async parse(fileName: string, getFile: (fileName: string) => Promise<string>, depthIn?: number, pathIn?: string[], docIn?: TFaustDocs): Promise<TFaustDocs> {\n        if (depthIn === 0) return docIn;\n        const depth = depthIn || 2;\n        const strIn = await getFile(fileName);\n        const doc: TFaustDocs = docIn || {};\n        const path = pathIn || [];\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        let curName = \"\"; // current function name\n        let strBuffer = \"\"; // current function doc\n        const lines = strIn.split(\"\\n\");\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (!line) continue; // empty line\n            if (!Faust2MD.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    inComment = false;\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                const libs = this.matchLibrary(line);\n                const imps = this.matchImport(line);\n                for (let j = 0; j < libs.length; j++) {\n                    const lib = libs[j];\n                    await this.parse(lib.fileName, getFile, depth - 1, [...path, lib.namespace], doc);\n                }\n                for (let j = 0; j < imps.length; j++) {\n                    const imp = imps[j];\n                    await this.parse(imp, getFile, depth - 1, path, doc);\n                }\n                continue;\n            }\n            if (inComment) { // we are in a md-comment (not first line)\n                if (idt === 0) idt = Faust2MD.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: Faust2MD.matchEndComment(line), endS: Faust2MD.matchEndSection(line), endT: Faust2MD.matchEndTitle(line) };\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strBuffer += Faust2MD.outdent(line, idt) + \"\\n\";\n                if (endC) { // pop buffer\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                continue;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: Faust2MD.matchBeginComment(line), s: Faust2MD.matchBeginSection(line), t: Faust2MD.matchBeginTitle(line) };\n            if (c) curName = this.matchFuncName(c);\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n                strBuffer = \"\";\n            }\n        }\n        return doc;\n    }\n}\n","import { languages, editor, Position, Range } from \"monaco-editor\";\nimport { LibFaust } from \"@grame/faustwasm\";\nimport { Faust2Doc, TFaustDocs, TFaustDoc } from \"./Faust2Doc\";\n\nimport { docSections, faustDocURL } from \"../documentation\";\n\nexport type FaustLanguageProviders = {\n    hoverProvider: languages.HoverProvider;\n    tokensProvider: languages.IMonarchLanguage;\n    completionItemProvider: languages.CompletionItemProvider;\n    docs: TFaustDocs;\n};\nexport const language: languages.ILanguageExtensionPoint = {\n    id: \"faust\",\n    extensions: [\"dsp\", \"lib\"],\n    mimetypes: [\"application/faust\"]\n};\nexport const config: languages.LanguageConfiguration = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\"/*\", \"*/\"]\n    },\n    brackets: [\n        [\"{\", \"}\"],\n        [\"[\", \"]\"],\n        [\"(\", \")\"]\n    ],\n    autoClosingPairs: [\n        { open: \"{\", close: \"}\" },\n        { open: \"[\", close: \"]\" },\n        { open: \"(\", close: \")\" },\n        { open: '\"', close: '\"', notIn: [\"string\"] },\n        { open: \"/*\", close: \"*/\", notIn: [\"string\"] }\n    ]\n};\nexport const theme: editor.IStandaloneThemeData = {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n        { token: \"faustFunctions\", foreground: \"DDDD99\" },\n        { token: \"faustKeywords\", foreground: \"4499CC\" },\n        { token: \"faustLib\", foreground: \"CCCCBB\" },\n        { token: \"faustCompOperators\", foreground: \"FFDDFF\" },\n        { token: \"identifier\", foreground: \"77CCFF\" }\n    ],\n    colors: {}\n};\nconst faustKeywords = [\n    \"import\", \"component\", \"declare\", \"library\", \"environment\", \"int\", \"float\",\n    \"letrec\", \"with\", \"class\", \"process\", \"effect\", \"inputs\", \"outputs\"\n];\nconst faustFunctions = [\n    \"mem\", \"prefix\", \"rdtable\", \"rwtable\",\n    \"select2\", \"select3\", \"ffunction\", \"fconstant\", \"fvariable\",\n    \"route\", \"waveform\", \"soundfile\",\n    \"button\", \"checkbox\", \"vslider\", \"hslider\", \"nentry\",\n    \"vgroup\", \"hgroup\", \"tgroup\", \"vbargraph\", \"hbargraph\", \"attach\",\n    \"acos\", \"asin\", \"atan\", \"atan2\", \"cos\", \"sin\", \"tan\", \"exp\",\n    \"log\", \"log10\", \"pow\", \"sqrt\", \"abs\", \"min\", \"max\", \"fmod\",\n    \"remainder\", \"floor\", \"ceil\", \"rint\", \"round\",\n    \"seq\", \"par\", \"sum\", \"prod\"\n];\nconst getFile = async (fileName: string, libFaust: LibFaust) => {\n    if (libFaust) return libFaust.fs().readFile(\"/usr/share/faust/\" + fileName, { encoding: \"utf8\" }) as string;\n    const libPath = \"https://faustlibraries.grame.fr/libs/\";\n    const res = await fetch(libPath + fileName);\n    return res.text();\n};\ntype TMatchedFaustDoc = { nameArray: string[]; name: string; range: Range; doc: TFaustDoc };\n/**\n * Match an available doc key from monaco editor\n *\n * @param {TFaustDocs} doc\n * @param {editor.ITextModel} model\n * @param {Position} position\n * @returns {TMatchedFaustDoc} full: [...prefixes, name], range: a monaco range object, doc: a FaustDoc object\n */\nexport const matchDocKey = (doc: TFaustDocs, model: editor.ITextModel, position: Position): TMatchedFaustDoc => {\n    const line$ = position.lineNumber;\n    const line = model.getLineContent(line$);\n    const wordAtPosition = model.getWordAtPosition(position);\n    if (!wordAtPosition) return null;\n    let column$ = wordAtPosition.startColumn - 1;\n    const name = wordAtPosition.word;\n    const prefixes: string[] = [];\n    while (column$ - 2 >= 0 && line[column$ - 1] === \".\") {\n        column$ -= 2;\n        const prefixWord = model.getWordAtPosition(new Position(line$, column$));\n        prefixes.splice(0, 0, prefixWord.word);\n        column$ = prefixWord.startColumn - 1;\n    }\n    const nameArray = [...prefixes, name];\n    while (nameArray.length) {\n        const name = nameArray.join(\".\");\n        const e = doc[name];\n        if (e) {\n            return {\n                nameArray,\n                name,\n                range: new Range(line$, column$ + 1, line$, wordAtPosition.endColumn),\n                doc: e\n            };\n        }\n        column$ += nameArray.splice(0, 1)[0].length + 1;\n    }\n    return null;\n};\nexport const getProviders = async (libFaust: LibFaust): Promise<FaustLanguageProviders> => {\n    let libDocs: TFaustDocs = {};\n    let primDocs: TFaustDocs = {};\n    try {\n        libDocs = await Faust2Doc.parse(\"stdfaust.lib\", async (fileName: string) => getFile(fileName, libFaust));\n        primDocs = await Faust2Doc.parse(\"primitives.lib\", async (fileName: string) => getFile(fileName, libFaust));\n    } catch (e) { console.error(e); } // eslint-disable-line no-empty, no-console\n    const faustLib = Object.keys(libDocs);\n\n    const hoverProvider: languages.HoverProvider = {\n        provideHover: (model, position) => {\n            const matched = matchDocKey({ ...primDocs, ...libDocs }, model, position);\n            if (matched) {\n                const prefix = matched.nameArray.slice();\n                const name = prefix.pop();\n                const doc = matched.doc;\n                return {\n                    range: matched.range,\n                    contents: [\n                        { value: `\\`\\`\\`\\n${prefix.length ? \"(\" + prefix.join(\".\") + \".)\" : \"\"}${name}\\n\\`\\`\\`` },\n                        { value: doc.doc.replace(/#+/g, \"######\") },\n                        { value: prefix.length ? `[Detail...](${faustDocURL}/${docSections[prefix.slice(0, 2).join(\"\")]}/#${prefix.join(\".\")}${doc.name.replace(/[[\\]|]/g, \"\").toLowerCase()})` : \"[Detail...](https://faustdoc.grame.fr/manual/syntax/index.html#faust-syntax)\" }\n                    ]\n                };\n            }\n            return null;\n        }\n    };\n    const tokensProvider: languages.IMonarchLanguage = ({\n        faustKeywords,\n        faustFunctions,\n        faustLib,\n        defaultToken: \"invalid\",\n        tokenPostfix: \".dsp\",\n        faustCompOperators: [\n            \"~\", \",\", \":\", \"<:\", \":>\"\n        ],\n        operators: [\n            \"=\",\n            \"+\", \"-\", \"*\", \"/\", \"%\", \"^\",\n            \"&\", \"|\", \"xor\", \"<<\", \">>\",\n            \">\", \"<\", \"==\", \"<=\", \">=\", \"!=\",\n            \"@\", \"'\"\n        ],\n        // we include these common regular expressions\n        symbols: /[=><!~?:&|+\\-*/^%]+/,\n        // C# style strings\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n        // The main tokenizer for our languages\n        tokenizer: {\n            root: [\n                // identifiers and keywords\n                [/!|_/, \"keyword\"],\n                [/[a-z_$]([\\w.$]*[\\w$])?/, {\n                    cases: {\n                        \"@faustFunctions\": \"faustFunctions\",\n                        \"@faustKeywords\": \"faustKeywords\",\n                        \"@faustLib\": \"faustLib\",\n                        \"@default\": \"identifier\"\n                    }\n                }],\n                [/[A-Z][\\w$]*/, \"type.identifier\"],\n                // whitespace\n                { include: \"@whitespace\" },\n                // delimiters and operators\n                [/[{}()[\\]]/, \"@brackets\"],\n                [/~|,|<:|:>|:/, \"faustCompOperators\"],\n                [/[<>](?!@symbols)/, \"@brackets\"],\n                [/=|\\+|-|\\*|\\/|%|\\^|&|\\||xor|<<|>>|>|<|==|<=|>=|!=|@|'/, {\n                    cases: {\n                        \"@operators\": \"operators\",\n                        \"@default\": \"\"\n                    }\n                }],\n                // numbers\n                [/\\d*\\.\\d+([eE][-+]?\\d+)?/, \"number.float\"],\n                [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n                [/\\d+/, \"number\"],\n                // delimiter: after number because of .\\d floats\n                [/[;.]/, \"delimiter\"],\n                // strings\n                [/\"/, { token: \"string\", next: \"@string\" }]\n            ],\n            comment: [\n                [/[^/*]+/, \"comment\"],\n                [/\\/\\*/, \"comment\", \"@push\"],\n                [/\\*\\//, \"comment\", \"@pop\"],\n                [/[/*]/, \"comment\"]\n            ],\n            string: [\n                [/[^\\\\\"$]+/, \"string\"],\n                [/@escapes/, \"string.escape\"],\n                [/\\\\./, \"string.escape.invalid\"],\n                [/\"/, \"string\", \"@pop\"]\n            ],\n            whitespace: [\n                [/[ \\t\\r\\n]+/, \"white\"],\n                [/\\/\\*/, \"comment\", \"@comment\"],\n                [/\\/\\/.*$/, \"comment\"]\n            ]\n        }\n    } as any);\n    const completionItemProvider: languages.CompletionItemProvider = {\n        provideCompletionItems: () => {\n            const suggestions: languages.CompletionItem[] = [];\n            [...faustKeywords, ...faustFunctions, ...faustLib].forEach((e) => {\n                suggestions.push({\n                    label: e,\n                    kind: languages.CompletionItemKind.Text,\n                    insertText: e,\n                    range: null\n                });\n            });\n            return { suggestions };\n        }\n    };\n    return { hoverProvider, tokensProvider, completionItemProvider, docs: libDocs };\n};\n"],"names":["Faust2MD","frontMatter","fileName","concat","Date","toLocaleDateString","outdent","line","idt","length","substr","matchBeginTitle","matched","match","REGEX_BEG_TITLE","matchEndTitle","REGEX_END_TITLE","matchBeginSection","REGEX_BEG_SECTION","matchEndSection","REGEX_END_SECTION","matchBeginComment","REGEX_BEG_COMMENT","matchEndComment","REGEX_END_COMMENT","indentation","REGEX_INDENT","isComment","REGEX_COMMENT","parse","strIn","optionsIn","options","_objectSpread","tabsize","code","front","strOut","inComment","split","forEach","_endC$endS$endT","endC","endS","endT","_c$s$t","c","s","t","_defineProperty","Faust2Doc","matchLibrary","libs","exps","RegExp","REGEX_DEF_LIB","exp","push","namespace","matchImport","imps","REGEX_DEF_IMP","matchFuncName","str","REGEX_FUNC_NAME","getAllConditions","getCondition","condsIn","conds","cond","regexp","REGEX_FUNC_NAME_COND","result","exec","found","index","subConds","splice","filter","el","map","replace","before","substring","after","subCond","getFile","depthIn","pathIn","docIn","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","depth","doc","path","curName","strBuffer","lines","i","j","lib","_j","imp","wrap","_callee$","_context","prev","next","abrupt","sent","name","join","stop","languages","Position","Range","docSections","faustDocURL","language","id","extensions","mimetypes","config","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","theme","base","inherit","rules","token","foreground","colors","faustKeywords","faustFunctions","_ref","libFaust","libPath","res","fs","readFile","encoding","fetch","text","_x","_x2","apply","arguments","matchDocKey","model","position","line$","lineNumber","getLineContent","wordAtPosition","getWordAtPosition","column$","startColumn","word","prefixes","prefixWord","nameArray","e","range","endColumn","getProviders","_ref2","_callee4","libDocs","primDocs","faustLib","hoverProvider","tokensProvider","completionItemProvider","_callee4$","_context4","_ref3","_callee2","_callee2$","_context2","_x4","_ref4","_callee3","_callee3$","_context3","_x5","t0","console","error","Object","keys","provideHover","prefix","slice","pop","contents","value","toLowerCase","defaultToken","tokenPostfix","faustCompOperators","operators","symbols","escapes","tokenizer","root","cases","include","comment","string","whitespace","provideCompletionItems","suggestions","label","kind","CompletionItemKind","Text","insertText","docs","_x3"],"sourceRoot":""}